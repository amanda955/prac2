// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16(a=x,
          b[0]=false, b[1]=false, b[2]=false, b[3]=false,
          b[4]=false, b[5]=false, b[6]=false, b[7]=false,
          b[8]=false, b[9]=false, b[10]=false, b[11]=false,
          b[12]=false, b[13]=false, b[14]=false, b[15]=false,
          sel=zx, out=xZ);
    Not16(in=xZ, out=xN);
    Mux16(a=xZ, b=xN, sel=nx, out=xP);

    Mux16(a=y,
          b[0]=false, b[1]=false, b[2]=false, b[3]=false,
          b[4]=false, b[5]=false, b[6]=false, b[7]=false,
          b[8]=false, b[9]=false, b[10]=false, b[11]=false,
          b[12]=false, b[13]=false, b[14]=false, b[15]=false,
          sel=zy, out=yZ);
    Not16(in=yZ, out=yN);
    Mux16(a=yZ, b=yN, sel=ny, out=yP);

    And16(a=xP, b=yP, out=andOut);
    Add16(a=xP, b=yP, out=addOut, over=dummyCarry);
    Mux16(a=andOut, b=addOut, sel=f, out=fOut);

    Not16(in=fOut, out=outN);
    Mux16(a=fOut, b=outN, sel=no, out=out);

    Or8Way(in[0]=out[0], in[1]=out[1], in[2]=out[2], in[3]=out[3],
           in[4]=out[4], in[5]=out[5], in[6]=out[6], in[7]=out[7], out=anyLow);
    Or8Way(in[0]=out[8], in[1]=out[9], in[2]=out[10], in[3]=out[11],
           in[4]=out[12], in[5]=out[13], in[6]=out[14], in[7]=out[15], out=anyHigh);
    Or(a=anyLow, b=anyHigh, out=anyBit);
    Not(in=anyBit, out=zr);

    Or(a=out[15], b=false, out=ng);

    Or(a=false, b=false, out=zr);
    Or(a=false, b=false, out=ng);

}



